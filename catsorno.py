# -*- coding: utf-8 -*-
"""catsorno.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/andreanstev/CatsOrNo/blob/main/catsorno.ipynb
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
from PIL import Image
import cv2 as cv
import h5py
import matplotlib
import matplotlib.pyplot as plt
# %matplotlib inline
np.set_printoptions(precision=7)
import tensorflow as tf
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

def load_dataset():
    dataset = h5py.File('catvnoncat.h5','r')
    print('dataset loaded')
    train_set_x_orig = np.array(dataset['X_train'][:]) #train set features
    train_set_y_orig = np.array(dataset['y_train'][:]) #train set labels
    val_set_x_orig = np.array(dataset['X_val'][:]) #val set features
    val_set_y_orig = np.array(dataset['y_val'][:]) #val set labels
    classes = np.array(dataset['classes'][:]) #list of classes
    return train_set_x_orig,train_set_y_orig,val_set_x_orig,val_set_y_orig,classes

def open_image(filename, show=True):
    image = Image.open(filename)
    image = np.array(image)
    if show:
        plt.imshow(image)
        plt.show
    return image

#Function for resizing an image into 64x64 pixel
def resize_image(image, shape=(64,64),show=True):
    new_image = cv.resize(image, shape, interpolation=cv.INTER_AREA)
    if show:
        plt.imshow(new_image)
        plt.show()
    return new_image

X_train_ori, y_train, X_val_ori, y_val, classes= load_dataset()

fig, ax = plt.subplots(3,10,figsize=(18,5))
fig.subplots_adjust(hspace=0.1, wspace=0.1)
for j in range(0,3):
    for i in range(0,10):
        ax[j,i].imshow(X_train_ori[i+j*10])
        ax[j,i].set_title(classes[y_train[i+j*10,0]].decode('utf-8'))
        ax[j,i].axis('off')
plt.show()

X_train_ori = np.asarray(X_train_ori)
y_train = np.asarray(y_train)
X_val_ori = np.asarray(X_val_ori)
y_val = np.asarray(y_val)

X_train_ori.shape

model = Sequential()
model.add(Conv2D(32, (3,3), activation='relu', input_shape=(64,64,3))) #16 filters, 3x3 kernel
model.add(MaxPooling2D(pool_size=(3,3)))
model.add(Conv2D(32, (3,3), activation='relu'))
model.add(MaxPooling2D(pool_size=(3,3)))
model.add(Flatten())
model.add(Dense(100, activation='relu'))
model.add(Dense(50, activation='relu'))
model.add(Dense(2, activation='softmax'))

batch_size=100
num_epochs=25
model.compile(optimizer='adam',
              loss=tf.keras.losses.sparse_categorical_crossentropy,
              metrics=['accuracy'])
model.fit(x=X_train_ori, 
          y=y_train, 
          batch_size=batch_size, 
          epochs=num_epochs, 
          validation_data=(X_val_ori, y_val))

yhat_train = model.predict(X_train_ori)

y = [int(y_train) for y_train in y_train]

pred_df = pd.DataFrame(data=np.array([pd.Series(y),pd.Series(yhat_train[:,1])]).T, columns=['Actual','Predicted'])

pred_df['Predicted'] = pred_df['Predicted'].apply(lambda x: 1. if x > 0.5 else 0.)

pred_df

#Model Evaluation
from sklearn.metrics import classification_report, accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, roc_curve, roc_auc_score

print(classification_report(pred_df['Actual'], pred_df['Predicted']))
print("accuracy:", accuracy_score(pred_df['Actual'], pred_df['Predicted']))
print("precision:", precision_score(pred_df['Actual'], pred_df['Predicted']))
print("recall:", recall_score(pred_df['Actual'], pred_df['Predicted']))
print("f1 score:", f1_score(pred_df['Actual'], pred_df['Predicted']))

#Testing
dummy = open_image('005940800_1552970791-fotoHL_kucing.jpg')
dummy = resize_image(dummy)
dummy = dummy/255.
dummy = np.reshape(dummy,(1,64,64,3))
ydummy = model.predict(np.asarray(dummy))
ydummy #cat predicted with 52% probability

dummy2 = open_image('unnamed.jpg')
dummy2 = resize_image(dummy2)
dummy2 = dummy/255.
dummy2 = np.reshape(dummy2,(1,64,64,3))
ydummy2 = model.predict(np.asarray(dummy2))
ydummy2 #cats predicted with 50.8% probability

dummy3 = open_image('5484d9d1eab8ea3017b17e29.jpg')
dummy3 = resize_image(dummy3)
dummy3 = dummy/255.
dummy3 = np.reshape(dummy3,(1,64,64,3))
ydummy3 = model.predict(np.asarray(dummy3))
ydummy3 #dog predicted as cat with 50.8% probability

dummy4 = open_image('starz_svod-23220-Full-Image_GalleryBackground-en-US-1483993553378._SX1080_.jpg')
dummy4 = resize_image(dummy4)
dummy4 = dummy/255.
dummy4 = np.reshape(dummy4,(1,64,64,3))
ydummy4 = model.predict(np.asarray(dummy4))
ydummy4 #Garfield predicted as cat with 50.8% probability
